#!/bin/sh /etc/rc.common
# Copyright (C) 2020-2022 Leo Zhao <skygunner5@hotmail.com>
# Licensed to the public under the Apache License 2.0.

START=99
USE_PROCD=1
PROG=/usr/bin/xray
CONFIG=/etc/xray/config.json
lan_ipv4=$(ip -4 addr|grep inet|awk '{printf "%s,\n", $2}')
lan_ipv6=$(ip -6 addr|grep inet|awk '{printf "%s,\n", $2}')

get_config() {
	config_get_bool enabled $1 enabled '0'
	config_get loglevel $1 loglevel
	config_get serverAddr $1 serverAddr
	config_get port $1 port
	config_get uuid $1 uuid
	}

start_service() {
	config_load xray
	config_foreach get_config basic
	[ $enabled != 1 ] && return 1
	if ! nft -f /etc/xray/xray.nft
    then
      nft flush table inet xray
      nft delete table inet xray
      return 1
    fi
	nft add element inet xray reserve_v4 { $lan_ipv4 }
	nft add element inet xray reserve_v6 { $lan_ipv6 }
	ip rule add fwmark 1 table 100
	ip route add local 0.0.0.0/0 dev lo table 100
	ip -6 rule add fwmark 1 table 106
	ip -6 route add local ::/0 dev lo table 106

	cat > $CONFIG << EOF
{"log":{"loglevel":"$loglevel"},"routing":{"domainStrategy":"IPOnDemand","rules":[{"type":"field","protocol":["bittorrent"],"outboundTag":"direct"}]},"inbounds":[{"tag":"transparent","port":12345,"protocol":"dokodemo-door","settings":{"network":"tcp,udp","followRedirect":true},"sniffing":{"enabled":true,"destOverride":["http","tls"]},"streamSettings":{"sockopt":{"tproxy":"tproxy"}}}],"outbounds":[{"tag":"proxy","protocol":"vless","streamSettings":{"network":"httpupgrade","security":"tls","httpupgradeSettings":{"path":"/hu?ed=2560"},"tlsSettings":{"allowInsecure":false,"serverName":"$serverAddr","alpn":["http/1.1"]},"sockopt":{"mark":255}},"settings":{"vnext":[{"address":"$serverAddr","port":$port,"users":[{"id":"$uuid","encryption":"none","level":0}]}]}},{"tag":"direct","protocol":"freedom","streamSettings":{"sockopt":{"mark":255}}},{"tag":"block","protocol":"blackhole","settings":{"response":{"type":"http"}}}]}
EOF

	procd_open_instance xray
	procd_set_param command "$PROG"
	procd_append_param command -config="$CONFIG"
	procd_set_param limits nofile="unlimited"
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param pidfile /var/run/xray
	procd_close_instance
}

stop_service() {
	output=$(nft list ruleset|grep xray)
	if [ -n "$output" ];
	then
		nft flush table inet xray
		nft delete table inet xray
		ip rule del table 100
		ip route flush table 100
		ip -6 rule del table 106
		ip -6 route flush table 106
	fi
}

service_triggers() {
	procd_add_reload_trigger "xray" "dhcp" "network"
	procd_add_reload_interface_trigger wan
}

reload_service() {
	stop
	start
}