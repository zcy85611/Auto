#!/bin/sh /etc/rc.common
START=99
STOP=60

USE_PROCD=1

NFS_D=/var/lib/nfs
RECOVERY_D=$NFS_D/v4recovery
LOCK_D=/var/lib/nfs/sm
VAR_NFS=/var/lib/nfs

get_mounted_nfs() {
	[ -z "$MOUNTED_ALL" ] && {
		MOUNTED_ALL=$(mount)
		MOUNTED_NFS_ALL=$(echo -e "$MOUNTED_ALL"|grep "type\s\+nfs\s")
	}
}

create_mount_dir() {
	if [ -d "$1" ]; then
		[ -z $(ls $"$1" 2>/dev/null) ] && return 0
		return 1
	else
		mkdir "$1"
		return 0
	fi
}

nfs_mount() {
     local enabled host path mount_on read_only
	[  -z "$1" ] && return 1
	config_get enabled "$1" enabled
	[ "$enabled" = '1' ] || return 1
	config_get host "$1" host
	[ -z "$host" ] && return 1
	config_get path "$1" path
	[ -z "$path" ] && return 1
	config_get mount_on "$1" mount_on
	[ -z "$mount_on" ] && return 1
	config_get read_only "$1" read_only '0'
	MOUNT_OPERATION="rw"
	[ $read_only = '1' ] && MOUNT_OPERATION="ro"
	get_mounted_nfs
	NFS_MOUNTING=$([ -z "$NFS_MOUNTING" ] || echo "$NFS_MOUNTING\n")"$host:$path"
	NFS_MOUNT_MATCH=$(echo -e "$MOUNTED_NFS_ALL"|grep "^$host:$path")
	if [ -z "$NFS_MOUNT_MATCH" ]; then
		create_mount_dir "$mount_on" && mount -t nfs -o $MOUNT_OPERATION -o nolock "$host:$path" "$mount_on"
	else
		echo "$NFS_MOUNT_MATCH"|grep "$mount_on\s\+type\s\+nfs\s\+($MOUNT_OPERATION" 2>/dev/null && return 1
		umount -fr "$mount_on" && mount -t nfs -o $MOUNT_OPERATION -o nolock "$host:$path" "$mount_on"
	fi
}

nfs_mount_clean() {
	MOUNTED_ALL=''
	get_mounted_nfs
	echo -e "$MOUNTED_NFS_ALL"|while read NFS_SHARED
	do
		echo -e "$NFS_MOUNTING"|grep -x "${NFS_SHARED% on *}" 2>/dev/null || {
			NFS_SHARED_MOUNT="${NFS_SHARED##* on }"
			NFS_SHARED_MOUNT="${NFS_SHARED_MOUNT%% type*}"
			umount -fr "$NFS_SHARED_MOUNT" && rm -r "$NFS_SHARED_MOUNT"
		}
	done
}

nfs_share() {
	local method enabled path clients NFS_OPERATION NFS_subtreecheck NFS_PERMISSION NFS_method NFS_INSECURE
	[ -z "$1" ] && return 1
	config_get enabled "$1" enabled
	[ "$enabled" = '1' ] || return 1
	config_get path "$1" path
	[ -d "$path" ] || return 1
	config_get clients "$1" clients
	[ -z "$clients" ] && return 1
	config_get NFS_PERMISSION "$1" permission
	config_get read_only "$1" read_only
	[ $read_only = '0' ] && NFS_OPERATION="rw"
	[ $read_only = '1' ] && NFS_OPERATION="ro"
	config_get method "$1" method
	[ $method = '0' ] && NFS_method="sync"
	[ $method = '1' ] && NFS_method="async"
	config_get subtreecheck "$1" subtreecheck
	[ $subtreecheck = '0' ] && NFS_subtreecheck="no_subtree_check"
	[ $subtreecheck = '1' ] && NFS_subtreecheck="subtree_check"
	config_get insecure "$1" insecure
	[ $insecure = '0' ] && NFS_INSECURE="secure"
	[ $insecure = '1' ] && NFS_INSECURE="insecure"
	echo "$path $clients($NFS_OPERATION,$NFS_subtreecheck,$NFS_PERMISSION,$NFS_method,$NFS_INSECURE)" >> /etc/exports
}

nfs_basic() {
	config_get enabled "$1" enabled
}

start_service() {
	config_load 'nfsd'
	config_foreach nfs_basic 'basic'
	[ "$enabled" = '1' ] || return 1
	rm -rf /etc/exports
	config_foreach nfs_share 'share'
	config_foreach nfs_mount 'mount'

	grep -q /proc/fs/nfsd /proc/mounts || mount -t nfsd nfsd /proc/fs/nfsd
	mkdir -p $NFS_D
	mkdir -p $RECOVERY_D
	mkdir -p $LOCK_D
	touch $NFS_D/rmtab

	mkdir -p $VAR_NFS
	chown nfs:nfs $VAR_NFS

	sysctl -w fs.nfs.nlm_tcpport=32777 fs.nfs.nlm_udpport=32777 > /dev/null

	procd_open_instance
	procd_set_param command /usr/sbin/rpc.statd -p 32778 -o 32779 -F
	procd_close_instance

	/usr/sbin/exportfs -r
	/usr/sbin/rpc.nfsd --grace-time 10

	procd_open_instance
	procd_set_param command /usr/sbin/rpc.mountd -p 32780 -F
	procd_close_instance
}

stop_service() {
	rpc.nfsd 0 2> /dev/null
	/usr/sbin/exportfs -au
	grep -q /proc/fs/nfsd /proc/mounts && umount /proc/fs/nfsd
}

service_triggers() {
	local export_dirs="$(while read mp _r ; do echo -n "$mp " ; done < /etc/exports)"
	procd_add_reload_trigger "nfsd"
	procd_add_reload_mount_trigger $export_dirs
}
